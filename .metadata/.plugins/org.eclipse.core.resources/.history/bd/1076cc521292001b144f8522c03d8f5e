#include "BMP388.h"

#include "stm32l4xx_hal.h"

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart5;

uint8_t T1_reg1 = 0;
	uint8_t T1_reg2 = 0;
	uint8_t T2_reg1 = 0;
	uint8_t T2_reg2 = 0;
	uint8_t T3_reg1 = 0;
	uint8_t P1_reg1 = 0;
	uint8_t P1_reg2 = 0;
	uint8_t P2_reg1 = 0;
	uint8_t P2_reg2 = 0;
	uint8_t P3_reg1 = 0;
	uint8_t P4_reg1 = 0;
	uint8_t P5_reg1 = 0;
	uint8_t P5_reg2 = 0;
	uint8_t P6_reg1 = 0;
	uint8_t P6_reg2 = 0;
	uint8_t P7_reg1 = 0;
	uint8_t P8_reg1 = 0;
	uint8_t P9_reg1 = 0;
	uint8_t P9_reg2 = 0;
	uint8_t P10_reg1 = 0;
	uint8_t P11_reg1 = 0;
	int16_t NVM_PAR_T1 = 0;//27748;
		int16_t NVM_PAR_T2 = 0;//18555;
		int16_t NVM_PAR_T3 = 0;//246;
		int16_t NVM_PAR_P1 = 0;
		uint16_t NVM_PAR_P2 = 0;
		int16_t NVM_PAR_P3 = 0;
		int16_t NVM_PAR_P4 = 0;
		int16_t NVM_PAR_P5 = 0;
		int16_t NVM_PAR_P6 = 0;
		int16_t NVM_PAR_P7 = 0;
		int16_t NVM_PAR_P8 = 0;
		int16_t NVM_PAR_P9 = 0;
		int16_t NVM_PAR_P10 = 0;
		int16_t NVM_PAR_P11 = 0;

		float par_t1 = 0;
			  float par_t2 = 0;
			  float par_t3 = 0;

			  uint8_t temp0 = 0;
			  uint8_t temp1 = 0;
			  uint8_t temp2 = 0;

			  uint8_t press0 = 0;
			  uint8_t press1 = 0;
			  uint8_t press2 = 0;
			  uint32_t temperature = 0;
			  uint32_t pressure = 0;
			  float wynik = 0;
			  float partial_data1 = 0;
			  float partial_data2 = 0;
			  float partial_data3 = 0;
			  float partial_data4 = 0;
			  float comp_press = 0;
			  float partial_out1 = 0;
			  float partial_out2 = 0;
			  float temp = 0;
			  float pres = 0;

			  float par_p1 = 0;
			  	    float par_p2 = 0;
			  	    float par_p3 = 0;
			  	    float par_p4 = 0;
			  	    float par_p5 = 0;
			  	    float par_p6 = 0;
			  	    float par_p7 = 0;
			  	    float par_p8 = 0;
			  	    float par_p9 = 0;
			  	    float par_p10 = 0;
			  	    float par_p11 = 0;

			  	  uint32_t data_xlsb;
			  	        uint32_t data_lsb;
			  	        uint32_t data_msb;


uint8_t BMP388_read_temp_reg(void){
	uint8_t temp_regs[5];
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x31, 1, &temp_regs[0], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x32, 1, &temp_regs[1], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x33, 1, &temp_regs[2], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x34, 1, &temp_regs[3], 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x35, 1, &temp_regs[4], 1, 100);
	return temp_regs;
}

void BMP388_read_press_reg(void){
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x36, 1, &P1_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x37, 1, &P1_reg2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x38, 1, &P2_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x39, 1, &P2_reg2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3A, 1, &P3_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3B, 1, &P4_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3C, 1, &P5_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3D, 1, &P5_reg2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3E, 1, &P6_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x3F, 1, &P6_reg2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x40, 1, &P7_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x41, 1, &P8_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x42, 1, &P9_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x43, 1, &P9_reg2, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x44, 1, &P10_reg1, 1, 100);
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, 0x45, 1, &P11_reg1, 1, 100);
}

void BMP388_oversampling(void){
	//ustawienie oversampling temeratury i ciœnienia na x32
	uint8_t config = 0x2D;
	HAL_I2C_Mem_Write(&hi2c1, BMP388_ADDRESS, BMP388_OSR, 1, &config, 1, 100);
}

void BMP388_read_temp_coef(void){
	NVM_PAR_T1 = (((uint16_t)T1_reg2 << 8) | (uint16_t)T1_reg1);
	NVM_PAR_T2 = (((uint16_t)T2_reg2 << 8) | (uint16_t)T2_reg1);
	NVM_PAR_T3 = (uint16_t)T3_reg1;
}

void BMP388_read_pres_coef(void){
	NVM_PAR_P1 = (((uint16_t)P1_reg2 << 8) | (uint16_t)P1_reg1);
	NVM_PAR_P2 = (((uint16_t)P2_reg2 << 8) | (uint16_t)P2_reg1);
	NVM_PAR_P3 = ((uint16_t)P3_reg1);
	NVM_PAR_P4 = ((uint16_t)P4_reg1);
	NVM_PAR_P5 = (((uint16_t)P5_reg2 << 8) | (uint16_t)P5_reg1);
	NVM_PAR_P6 = (((uint16_t)P6_reg2 << 8) | (uint16_t)P6_reg1);
	NVM_PAR_P7 = ((uint16_t)P7_reg1);
    NVM_PAR_P8 = ((uint16_t)P8_reg1);
	NVM_PAR_P9 = (((uint16_t)P9_reg2 << 8) | (uint16_t)P9_reg1);
	NVM_PAR_P10 = ((uint16_t)P10_reg1);
	NVM_PAR_P11 = ((uint16_t)P11_reg1);
}

void BMP388_calculate_temp_coef(void){
	par_t1 = (float)NVM_PAR_T1*pow(2,8);//7103488
	par_t2 = (float)NVM_PAR_T2/pow(2,30);
	par_t3 = (float)NVM_PAR_T3/pow(2,48);
}

void BMP388_calculate_pres_coef(void){
	par_p1 = ((float)NVM_PAR_P1-pow(2,14))/pow(2,20);
	par_p2 = ((float)NVM_PAR_P2-pow(2,14))/pow(2,29);
	par_p3 = (float)NVM_PAR_P3/pow(2,32);
	par_p4 = (float)NVM_PAR_P4/pow(2,37);
	par_p5 = (float)NVM_PAR_P5*pow(2,3);
	par_p6 = (float)NVM_PAR_P6/pow(2,6);
	par_p7 = (float)NVM_PAR_P7/pow(2,8);
	par_p8 = (float)NVM_PAR_P8/pow(2,15);
	par_p9 = (float)NVM_PAR_P9/pow(2,48);
	par_p10 = (float)NVM_PAR_P10/pow(2,48);
	par_p11 = (float)NVM_PAR_P11/pow(2,65);
}

void BMP_check_ID(void){
	uint8_t result = 0;
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_CHIP_ID, 1, &result, 1, 100);
	HAL_UART_Transmit(&huart5, &result, sizeof(result), 100);
}

float BMP388_measure_temp(void){
	uint8_t data = 0x13;

	HAL_I2C_Mem_Write(&hi2c1, BMP388_ADDRESS, BMP388_PWR_CTRL, 1, &data, 1, 100);

	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_TEMP_XLSB, 1, &temp0, 1, 100);
	//HAL_UART_Transmit(&huart2, &temp0, sizeof(temp0), 100);

	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_TEMP_LSB, 1, &temp1, 1, 100);
	//HAL_UART_Transmit(&huart2, &temp1, sizeof(temp1), 100);

	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_TEMP_MSB, 1, &temp2, 1, 100);
	//HAL_UART_Transmit(&huart2, &temp2, sizeof(temp2), 100);

	data_msb = (uint32_t)temp2 << 16;
	data_lsb = (uint32_t)temp1 << 8;
	data_xlsb = (uint32_t)temp0;
	temperature = data_msb | data_lsb | data_xlsb;

	temp = (float)temperature;

	partial_data1 = (float)(temp - par_t1);
	partial_data2 = (float)(partial_data1 * par_t2);

	wynik = partial_data2 +(partial_data1*partial_data1) * par_t3;

	return wynik;
}

float BMP388_measure_press(void){
	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_PRESS_XLSB, 1, &press0, 1, 100);
	//HAL_UART_Transmit(&huart2, &press0, sizeof(press0), 100);

	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_PRESS_LSB, 1, &press1, 1, 100);
	//HAL_UART_Transmit(&huart2, &press1, sizeof(press1), 100);

	HAL_I2C_Mem_Read(&hi2c1, BMP388_ADDRESS, BMP388_PRESS_MSB, 1, &press2, 1, 100);
	//HAL_UART_Transmit(&huart2, &press2, sizeof(press2), 100);

	data_msb = (uint32_t)press2 << 16;
	data_lsb = (uint32_t)press1 << 8;
	data_xlsb = (uint32_t)press0;
	pressure = data_msb | data_lsb | data_xlsb;//ok

	pres = (float)pressure;//ok policzone dla cisnienia 1000 i temp 25

	partial_data1 = par_p6*wynik;//ok 11833,59375
	partial_data2 = par_p7*(wynik*wynik);//ok 593,261719
	partial_data3 = par_p8*(wynik*wynik*wynik);//ok 117,301941
	partial_out1 = par_p5 + partial_data1 + partial_data2 + partial_data3;//ok 210312,15625

	partial_data1 = par_p2*wynik;//ok 0,002192
	partial_data2 = par_p3*(wynik*wynik);//ok 0,00000509317
	partial_data3 = par_p4*(wynik*wynik*wynik);//ok 0
	partial_out2 = pres *(par_p1 +  partial_data1 + partial_data2 + partial_data3);//ok -12,75555896759

	partial_data1 = pres * pres;// 1000000
	partial_data2 = par_p9 + par_p10 * wynik;//ok 6,05*10^(-11)
	partial_data3 = partial_data1 * partial_data2;//ok 0,000060584425
	partial_data4 = partial_data3 + (pres *pres*pres)*par_p11;//ok 0,000060589737
	comp_press = (partial_out1+partial_out2+partial_data4);

	return comp_press;
}

void BMP388_init(void){
	//odczyt rejestrów temperatury
	BMP388_read_temp_reg();
	//ustawienie oversampling temeratury i ciœnienia na x32
	BMP388_oversampling();
	//odczyt rejestrów ciœnienia
	BMP388_read_press_reg();
	//odczyt wspó³czynników temperatury
	BMP388_read_temp_coef();
	//odczyt wspó³czynników ciœnienia
	BMP388_read_pres_coef();
	//obliczenie temperatury
	BMP388_calculate_temp_coef();
	//obliczenie ciœnienia
	BMP388_calculate_pres_coef();
}
